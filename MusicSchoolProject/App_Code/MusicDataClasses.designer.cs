#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="music")]
public partial class MusicDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertdiscipline(discipline instance);
  partial void Updatediscipline(discipline instance);
  partial void Deletediscipline(discipline instance);
  partial void Insertgrade_perfomance(grade_perfomance instance);
  partial void Updategrade_perfomance(grade_perfomance instance);
  partial void Deletegrade_perfomance(grade_perfomance instance);
  partial void Insertgrade(grade instance);
  partial void Updategrade(grade instance);
  partial void Deletegrade(grade instance);
  partial void Insertgroup_class(group_class instance);
  partial void Updategroup_class(group_class instance);
  partial void Deletegroup_class(group_class instance);
  partial void Insertgroup_student(group_student instance);
  partial void Updategroup_student(group_student instance);
  partial void Deletegroup_student(group_student instance);
  partial void Insertgroup(group instance);
  partial void Updategroup(group instance);
  partial void Deletegroup(group instance);
  partial void Insertindividual_class(individual_class instance);
  partial void Updateindividual_class(individual_class instance);
  partial void Deleteindividual_class(individual_class instance);
  partial void Insertstudent(student instance);
  partial void Updatestudent(student instance);
  partial void Deletestudent(student instance);
  partial void Insertteacher(teacher instance);
  partial void Updateteacher(teacher instance);
  partial void Deleteteacher(teacher instance);
  partial void Insertweek_day(week_day instance);
  partial void Updateweek_day(week_day instance);
  partial void Deleteweek_day(week_day instance);
    #endregion

    public MusicDataClassesDataContext():
        base(System.Configuration.ConfigurationManager.
		ConnectionStrings["musicConnectionString"].ConnectionString, mappingSource)
    {
        OnCreated();
    }

    public MusicDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MusicDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MusicDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MusicDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<discipline> disciplines
	{
		get
		{
			return this.GetTable<discipline>();
		}
	}
	
	public System.Data.Linq.Table<grade_perfomance> grade_perfomances
	{
		get
		{
			return this.GetTable<grade_perfomance>();
		}
	}
	
	public System.Data.Linq.Table<grade> grades
	{
		get
		{
			return this.GetTable<grade>();
		}
	}
	
	public System.Data.Linq.Table<group_class> group_classes
	{
		get
		{
			return this.GetTable<group_class>();
		}
	}
	
	public System.Data.Linq.Table<group_student> group_students
	{
		get
		{
			return this.GetTable<group_student>();
		}
	}
	
	public System.Data.Linq.Table<group> groups
	{
		get
		{
			return this.GetTable<group>();
		}
	}
	
	public System.Data.Linq.Table<individual_class> individual_classes
	{
		get
		{
			return this.GetTable<individual_class>();
		}
	}
	
	public System.Data.Linq.Table<student> students
	{
		get
		{
			return this.GetTable<student>();
		}
	}
	
	public System.Data.Linq.Table<teacher> teachers
	{
		get
		{
			return this.GetTable<teacher>();
		}
	}
	
	public System.Data.Linq.Table<week_day> week_days
	{
		get
		{
			return this.GetTable<week_day>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.discipline")]
public partial class discipline : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _disciplineID;
	
	private string _name;
	
	private bool _isIndividual;
	
	private EntitySet<teacher> _teachers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndisciplineIDChanging(int value);
    partial void OndisciplineIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnisIndividualChanging(bool value);
    partial void OnisIndividualChanged();
    #endregion
	
	public discipline()
	{
		this._teachers = new EntitySet<teacher>(new Action<teacher>(this.attach_teachers), new Action<teacher>(this.detach_teachers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disciplineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int disciplineID
	{
		get
		{
			return this._disciplineID;
		}
		set
		{
			if ((this._disciplineID != value))
			{
				this.OndisciplineIDChanging(value);
				this.SendPropertyChanging();
				this._disciplineID = value;
				this.SendPropertyChanged("disciplineID");
				this.OndisciplineIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isIndividual", DbType="Bit NOT NULL")]
	public bool isIndividual
	{
		get
		{
			return this._isIndividual;
		}
		set
		{
			if ((this._isIndividual != value))
			{
				this.OnisIndividualChanging(value);
				this.SendPropertyChanging();
				this._isIndividual = value;
				this.SendPropertyChanged("isIndividual");
				this.OnisIndividualChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="discipline_teacher", Storage="_teachers", ThisKey="disciplineID", OtherKey="disciplineID")]
	public EntitySet<teacher> teachers
	{
		get
		{
			return this._teachers;
		}
		set
		{
			this._teachers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_teachers(teacher entity)
	{
		this.SendPropertyChanging();
		entity.discipline = this;
	}
	
	private void detach_teachers(teacher entity)
	{
		this.SendPropertyChanging();
		entity.discipline = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.grade_perfomance")]
public partial class grade_perfomance : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _studentID;
	
	private int _gradeID;
	
	private System.Nullable<int> _individual_classID;
	
	private System.Nullable<int> _group_classID;
	
	private EntityRef<grade> _grade;
	
	private EntityRef<group_class> _group_class;
	
	private EntityRef<individual_class> _individual_class;
	
	private EntityRef<student> _student;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OngradeIDChanging(int value);
    partial void OngradeIDChanged();
    partial void Onindividual_classIDChanging(System.Nullable<int> value);
    partial void Onindividual_classIDChanged();
    partial void Ongroup_classIDChanging(System.Nullable<int> value);
    partial void Ongroup_classIDChanged();
    #endregion
	
	public grade_perfomance()
	{
		this._grade = default(EntityRef<grade>);
		this._group_class = default(EntityRef<group_class>);
		this._individual_class = default(EntityRef<individual_class>);
		this._student = default(EntityRef<student>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int studentID
	{
		get
		{
			return this._studentID;
		}
		set
		{
			if ((this._studentID != value))
			{
				if (this._student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnstudentIDChanging(value);
				this.SendPropertyChanging();
				this._studentID = value;
				this.SendPropertyChanged("studentID");
				this.OnstudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gradeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int gradeID
	{
		get
		{
			return this._gradeID;
		}
		set
		{
			if ((this._gradeID != value))
			{
				if (this._grade.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OngradeIDChanging(value);
				this.SendPropertyChanging();
				this._gradeID = value;
				this.SendPropertyChanged("gradeID");
				this.OngradeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_individual_classID", DbType="Int")]
	public System.Nullable<int> individual_classID
	{
		get
		{
			return this._individual_classID;
		}
		set
		{
			if ((this._individual_classID != value))
			{
				if (this._individual_class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onindividual_classIDChanging(value);
				this.SendPropertyChanging();
				this._individual_classID = value;
				this.SendPropertyChanged("individual_classID");
				this.Onindividual_classIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_classID", DbType="Int")]
	public System.Nullable<int> group_classID
	{
		get
		{
			return this._group_classID;
		}
		set
		{
			if ((this._group_classID != value))
			{
				if (this._group_class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Ongroup_classIDChanging(value);
				this.SendPropertyChanging();
				this._group_classID = value;
				this.SendPropertyChanged("group_classID");
				this.Ongroup_classIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="grade_grade_perfomance", Storage="_grade", ThisKey="gradeID", OtherKey="gradeID", IsForeignKey=true)]
	public grade grade
	{
		get
		{
			return this._grade.Entity;
		}
		set
		{
			grade previousValue = this._grade.Entity;
			if (((previousValue != value) 
						|| (this._grade.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._grade.Entity = null;
					previousValue.grade_perfomances.Remove(this);
				}
				this._grade.Entity = value;
				if ((value != null))
				{
					value.grade_perfomances.Add(this);
					this._gradeID = value.gradeID;
				}
				else
				{
					this._gradeID = default(int);
				}
				this.SendPropertyChanged("grade");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_class_grade_perfomance", Storage="_group_class", ThisKey="group_classID", OtherKey="group_classID", IsForeignKey=true)]
	public group_class group_class
	{
		get
		{
			return this._group_class.Entity;
		}
		set
		{
			group_class previousValue = this._group_class.Entity;
			if (((previousValue != value) 
						|| (this._group_class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._group_class.Entity = null;
					previousValue.grade_perfomances.Remove(this);
				}
				this._group_class.Entity = value;
				if ((value != null))
				{
					value.grade_perfomances.Add(this);
					this._group_classID = value.group_classID;
				}
				else
				{
					this._group_classID = default(Nullable<int>);
				}
				this.SendPropertyChanged("group_class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="individual_class_grade_perfomance", Storage="_individual_class", ThisKey="individual_classID", OtherKey="individual_classID", IsForeignKey=true)]
	public individual_class individual_class
	{
		get
		{
			return this._individual_class.Entity;
		}
		set
		{
			individual_class previousValue = this._individual_class.Entity;
			if (((previousValue != value) 
						|| (this._individual_class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._individual_class.Entity = null;
					previousValue.grade_perfomances.Remove(this);
				}
				this._individual_class.Entity = value;
				if ((value != null))
				{
					value.grade_perfomances.Add(this);
					this._individual_classID = value.individual_classID;
				}
				else
				{
					this._individual_classID = default(Nullable<int>);
				}
				this.SendPropertyChanged("individual_class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_grade_perfomance", Storage="_student", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true)]
	public student student
	{
		get
		{
			return this._student.Entity;
		}
		set
		{
			student previousValue = this._student.Entity;
			if (((previousValue != value) 
						|| (this._student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._student.Entity = null;
					previousValue.grade_perfomances.Remove(this);
				}
				this._student.Entity = value;
				if ((value != null))
				{
					value.grade_perfomances.Add(this);
					this._studentID = value.studentID;
				}
				else
				{
					this._studentID = default(int);
				}
				this.SendPropertyChanged("student");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.grades")]
public partial class grade : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _gradeID;
	
	private string _name;
	
	private EntitySet<grade_perfomance> _grade_perfomances;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngradeIDChanging(int value);
    partial void OngradeIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public grade()
	{
		this._grade_perfomances = new EntitySet<grade_perfomance>(new Action<grade_perfomance>(this.attach_grade_perfomances), new Action<grade_perfomance>(this.detach_grade_perfomances));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gradeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int gradeID
	{
		get
		{
			return this._gradeID;
		}
		set
		{
			if ((this._gradeID != value))
			{
				this.OngradeIDChanging(value);
				this.SendPropertyChanging();
				this._gradeID = value;
				this.SendPropertyChanged("gradeID");
				this.OngradeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="grade_grade_perfomance", Storage="_grade_perfomances", ThisKey="gradeID", OtherKey="gradeID")]
	public EntitySet<grade_perfomance> grade_perfomances
	{
		get
		{
			return this._grade_perfomances;
		}
		set
		{
			this._grade_perfomances.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.grade = this;
	}
	
	private void detach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.grade = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.group_class")]
public partial class group_class : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _group_classID;
	
	private int _groupID;
	
	private int _weekdayID;
	
	private EntitySet<grade_perfomance> _grade_perfomances;
	
	private EntityRef<group> _group;
	
	private EntityRef<week_day> _week_day;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ongroup_classIDChanging(int value);
    partial void Ongroup_classIDChanged();
    partial void OngroupIDChanging(int value);
    partial void OngroupIDChanged();
    partial void OnweekdayIDChanging(int value);
    partial void OnweekdayIDChanged();
    #endregion
	
	public group_class()
	{
		this._grade_perfomances = new EntitySet<grade_perfomance>(new Action<grade_perfomance>(this.attach_grade_perfomances), new Action<grade_perfomance>(this.detach_grade_perfomances));
		this._group = default(EntityRef<group>);
		this._week_day = default(EntityRef<week_day>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_classID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int group_classID
	{
		get
		{
			return this._group_classID;
		}
		set
		{
			if ((this._group_classID != value))
			{
				this.Ongroup_classIDChanging(value);
				this.SendPropertyChanging();
				this._group_classID = value;
				this.SendPropertyChanged("group_classID");
				this.Ongroup_classIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="Int NOT NULL")]
	public int groupID
	{
		get
		{
			return this._groupID;
		}
		set
		{
			if ((this._groupID != value))
			{
				if (this._group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OngroupIDChanging(value);
				this.SendPropertyChanging();
				this._groupID = value;
				this.SendPropertyChanged("groupID");
				this.OngroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekdayID", DbType="Int NOT NULL")]
	public int weekdayID
	{
		get
		{
			return this._weekdayID;
		}
		set
		{
			if ((this._weekdayID != value))
			{
				if (this._week_day.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnweekdayIDChanging(value);
				this.SendPropertyChanging();
				this._weekdayID = value;
				this.SendPropertyChanged("weekdayID");
				this.OnweekdayIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_class_grade_perfomance", Storage="_grade_perfomances", ThisKey="group_classID", OtherKey="group_classID")]
	public EntitySet<grade_perfomance> grade_perfomances
	{
		get
		{
			return this._grade_perfomances;
		}
		set
		{
			this._grade_perfomances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_group_class", Storage="_group", ThisKey="groupID", OtherKey="groupID", IsForeignKey=true)]
	public group group
	{
		get
		{
			return this._group.Entity;
		}
		set
		{
			group previousValue = this._group.Entity;
			if (((previousValue != value) 
						|| (this._group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._group.Entity = null;
					previousValue.group_classes.Remove(this);
				}
				this._group.Entity = value;
				if ((value != null))
				{
					value.group_classes.Add(this);
					this._groupID = value.groupID;
				}
				else
				{
					this._groupID = default(int);
				}
				this.SendPropertyChanged("group");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="week_day_group_class", Storage="_week_day", ThisKey="weekdayID", OtherKey="weekdayID", IsForeignKey=true)]
	public week_day week_day
	{
		get
		{
			return this._week_day.Entity;
		}
		set
		{
			week_day previousValue = this._week_day.Entity;
			if (((previousValue != value) 
						|| (this._week_day.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._week_day.Entity = null;
					previousValue.group_classes.Remove(this);
				}
				this._week_day.Entity = value;
				if ((value != null))
				{
					value.group_classes.Add(this);
					this._weekdayID = value.weekdayID;
				}
				else
				{
					this._weekdayID = default(int);
				}
				this.SendPropertyChanged("week_day");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.group_class = this;
	}
	
	private void detach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.group_class = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.group_student")]
public partial class group_student : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _studentID;
	
	private int _groupID;
	
	private EntityRef<group> _group;
	
	private EntityRef<student> _student;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OngroupIDChanging(int value);
    partial void OngroupIDChanged();
    #endregion
	
	public group_student()
	{
		this._group = default(EntityRef<group>);
		this._student = default(EntityRef<student>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int studentID
	{
		get
		{
			return this._studentID;
		}
		set
		{
			if ((this._studentID != value))
			{
				if (this._student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnstudentIDChanging(value);
				this.SendPropertyChanging();
				this._studentID = value;
				this.SendPropertyChanged("studentID");
				this.OnstudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int groupID
	{
		get
		{
			return this._groupID;
		}
		set
		{
			if ((this._groupID != value))
			{
				if (this._group.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OngroupIDChanging(value);
				this.SendPropertyChanging();
				this._groupID = value;
				this.SendPropertyChanged("groupID");
				this.OngroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_group_student", Storage="_group", ThisKey="groupID", OtherKey="groupID", IsForeignKey=true)]
	public group group
	{
		get
		{
			return this._group.Entity;
		}
		set
		{
			group previousValue = this._group.Entity;
			if (((previousValue != value) 
						|| (this._group.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._group.Entity = null;
					previousValue.group_students.Remove(this);
				}
				this._group.Entity = value;
				if ((value != null))
				{
					value.group_students.Add(this);
					this._groupID = value.groupID;
				}
				else
				{
					this._groupID = default(int);
				}
				this.SendPropertyChanged("group");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_group_student", Storage="_student", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true)]
	public student student
	{
		get
		{
			return this._student.Entity;
		}
		set
		{
			student previousValue = this._student.Entity;
			if (((previousValue != value) 
						|| (this._student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._student.Entity = null;
					previousValue.group_students.Remove(this);
				}
				this._student.Entity = value;
				if ((value != null))
				{
					value.group_students.Add(this);
					this._studentID = value.studentID;
				}
				else
				{
					this._studentID = default(int);
				}
				this.SendPropertyChanged("student");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.groups")]
public partial class group : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _groupID;
	
	private System.Nullable<int> _name;
	
	private int _teacherID;
	
	private System.Nullable<int> _admission_year;
	
	private EntitySet<group_class> _group_classes;
	
	private EntitySet<group_student> _group_students;
	
	private EntityRef<teacher> _teacher;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngroupIDChanging(int value);
    partial void OngroupIDChanged();
    partial void OnnameChanging(System.Nullable<int> value);
    partial void OnnameChanged();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    partial void Onadmission_yearChanging(System.Nullable<int> value);
    partial void Onadmission_yearChanged();
    #endregion
	
	public group()
	{
		this._group_classes = new EntitySet<group_class>(new Action<group_class>(this.attach_group_classes), new Action<group_class>(this.detach_group_classes));
		this._group_students = new EntitySet<group_student>(new Action<group_student>(this.attach_group_students), new Action<group_student>(this.detach_group_students));
		this._teacher = default(EntityRef<teacher>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int groupID
	{
		get
		{
			return this._groupID;
		}
		set
		{
			if ((this._groupID != value))
			{
				this.OngroupIDChanging(value);
				this.SendPropertyChanging();
				this._groupID = value;
				this.SendPropertyChanged("groupID");
				this.OngroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Int")]
	public System.Nullable<int> name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int NOT NULL")]
	public int teacherID
	{
		get
		{
			return this._teacherID;
		}
		set
		{
			if ((this._teacherID != value))
			{
				if (this._teacher.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnteacherIDChanging(value);
				this.SendPropertyChanging();
				this._teacherID = value;
				this.SendPropertyChanged("teacherID");
				this.OnteacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admission_year", DbType="Int")]
	public System.Nullable<int> admission_year
	{
		get
		{
			return this._admission_year;
		}
		set
		{
			if ((this._admission_year != value))
			{
				this.Onadmission_yearChanging(value);
				this.SendPropertyChanging();
				this._admission_year = value;
				this.SendPropertyChanged("admission_year");
				this.Onadmission_yearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_group_class", Storage="_group_classes", ThisKey="groupID", OtherKey="groupID")]
	public EntitySet<group_class> group_classes
	{
		get
		{
			return this._group_classes;
		}
		set
		{
			this._group_classes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="group_group_student", Storage="_group_students", ThisKey="groupID", OtherKey="groupID")]
	public EntitySet<group_student> group_students
	{
		get
		{
			return this._group_students;
		}
		set
		{
			this._group_students.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_group", Storage="_teacher", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true)]
	public teacher teacher
	{
		get
		{
			return this._teacher.Entity;
		}
		set
		{
			teacher previousValue = this._teacher.Entity;
			if (((previousValue != value) 
						|| (this._teacher.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._teacher.Entity = null;
					previousValue.groups.Remove(this);
				}
				this._teacher.Entity = value;
				if ((value != null))
				{
					value.groups.Add(this);
					this._teacherID = value.teacherID;
				}
				else
				{
					this._teacherID = default(int);
				}
				this.SendPropertyChanged("teacher");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_group_classes(group_class entity)
	{
		this.SendPropertyChanging();
		entity.group = this;
	}
	
	private void detach_group_classes(group_class entity)
	{
		this.SendPropertyChanging();
		entity.group = null;
	}
	
	private void attach_group_students(group_student entity)
	{
		this.SendPropertyChanging();
		entity.group = this;
	}
	
	private void detach_group_students(group_student entity)
	{
		this.SendPropertyChanging();
		entity.group = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.individual_class")]
public partial class individual_class : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _individual_classID;
	
	private System.Nullable<int> _studentID;
	
	private int _weekdayID;
	
	private int _teacherID;
	
	private EntitySet<grade_perfomance> _grade_perfomances;
	
	private EntityRef<student> _student;
	
	private EntityRef<teacher> _teacher;
	
	private EntityRef<week_day> _week_day;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onindividual_classIDChanging(int value);
    partial void Onindividual_classIDChanged();
    partial void OnstudentIDChanging(System.Nullable<int> value);
    partial void OnstudentIDChanged();
    partial void OnweekdayIDChanging(int value);
    partial void OnweekdayIDChanged();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    #endregion
	
	public individual_class()
	{
		this._grade_perfomances = new EntitySet<grade_perfomance>(new Action<grade_perfomance>(this.attach_grade_perfomances), new Action<grade_perfomance>(this.detach_grade_perfomances));
		this._student = default(EntityRef<student>);
		this._teacher = default(EntityRef<teacher>);
		this._week_day = default(EntityRef<week_day>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_individual_classID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int individual_classID
	{
		get
		{
			return this._individual_classID;
		}
		set
		{
			if ((this._individual_classID != value))
			{
				this.Onindividual_classIDChanging(value);
				this.SendPropertyChanging();
				this._individual_classID = value;
				this.SendPropertyChanged("individual_classID");
				this.Onindividual_classIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int")]
	public System.Nullable<int> studentID
	{
		get
		{
			return this._studentID;
		}
		set
		{
			if ((this._studentID != value))
			{
				if (this._student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnstudentIDChanging(value);
				this.SendPropertyChanging();
				this._studentID = value;
				this.SendPropertyChanged("studentID");
				this.OnstudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekdayID", DbType="Int NOT NULL")]
	public int weekdayID
	{
		get
		{
			return this._weekdayID;
		}
		set
		{
			if ((this._weekdayID != value))
			{
				if (this._week_day.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnweekdayIDChanging(value);
				this.SendPropertyChanging();
				this._weekdayID = value;
				this.SendPropertyChanged("weekdayID");
				this.OnweekdayIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int NOT NULL")]
	public int teacherID
	{
		get
		{
			return this._teacherID;
		}
		set
		{
			if ((this._teacherID != value))
			{
				if (this._teacher.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnteacherIDChanging(value);
				this.SendPropertyChanging();
				this._teacherID = value;
				this.SendPropertyChanged("teacherID");
				this.OnteacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="individual_class_grade_perfomance", Storage="_grade_perfomances", ThisKey="individual_classID", OtherKey="individual_classID")]
	public EntitySet<grade_perfomance> grade_perfomances
	{
		get
		{
			return this._grade_perfomances;
		}
		set
		{
			this._grade_perfomances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_individual_class", Storage="_student", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true)]
	public student student
	{
		get
		{
			return this._student.Entity;
		}
		set
		{
			student previousValue = this._student.Entity;
			if (((previousValue != value) 
						|| (this._student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._student.Entity = null;
					previousValue.individual_classes.Remove(this);
				}
				this._student.Entity = value;
				if ((value != null))
				{
					value.individual_classes.Add(this);
					this._studentID = value.studentID;
				}
				else
				{
					this._studentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("student");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_individual_class", Storage="_teacher", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true)]
	public teacher teacher
	{
		get
		{
			return this._teacher.Entity;
		}
		set
		{
			teacher previousValue = this._teacher.Entity;
			if (((previousValue != value) 
						|| (this._teacher.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._teacher.Entity = null;
					previousValue.individual_classes.Remove(this);
				}
				this._teacher.Entity = value;
				if ((value != null))
				{
					value.individual_classes.Add(this);
					this._teacherID = value.teacherID;
				}
				else
				{
					this._teacherID = default(int);
				}
				this.SendPropertyChanged("teacher");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="week_day_individual_class", Storage="_week_day", ThisKey="weekdayID", OtherKey="weekdayID", IsForeignKey=true)]
	public week_day week_day
	{
		get
		{
			return this._week_day.Entity;
		}
		set
		{
			week_day previousValue = this._week_day.Entity;
			if (((previousValue != value) 
						|| (this._week_day.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._week_day.Entity = null;
					previousValue.individual_classes.Remove(this);
				}
				this._week_day.Entity = value;
				if ((value != null))
				{
					value.individual_classes.Add(this);
					this._weekdayID = value.weekdayID;
				}
				else
				{
					this._weekdayID = default(int);
				}
				this.SendPropertyChanged("week_day");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.individual_class = this;
	}
	
	private void detach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.individual_class = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student")]
public partial class student : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _studentID;
	
	private string _name;
	
	private string _lastname;
	
	private string _fathername;
	
	private System.DateTime _birthdate;
	
	private string _address;
	
	private System.Nullable<int> _admission_year;
	
	private EntitySet<grade_perfomance> _grade_perfomances;
	
	private EntitySet<group_student> _group_students;
	
	private EntitySet<individual_class> _individual_classes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnfathernameChanging(string value);
    partial void OnfathernameChanged();
    partial void OnbirthdateChanging(System.DateTime value);
    partial void OnbirthdateChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void Onadmission_yearChanging(System.Nullable<int> value);
    partial void Onadmission_yearChanged();
    #endregion
	
	public student()
	{
		this._grade_perfomances = new EntitySet<grade_perfomance>(new Action<grade_perfomance>(this.attach_grade_perfomances), new Action<grade_perfomance>(this.detach_grade_perfomances));
		this._group_students = new EntitySet<group_student>(new Action<group_student>(this.attach_group_students), new Action<group_student>(this.detach_group_students));
		this._individual_classes = new EntitySet<individual_class>(new Action<individual_class>(this.attach_individual_classes), new Action<individual_class>(this.detach_individual_classes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int studentID
	{
		get
		{
			return this._studentID;
		}
		set
		{
			if ((this._studentID != value))
			{
				this.OnstudentIDChanging(value);
				this.SendPropertyChanging();
				this._studentID = value;
				this.SendPropertyChanged("studentID");
				this.OnstudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string lastname
	{
		get
		{
			return this._lastname;
		}
		set
		{
			if ((this._lastname != value))
			{
				this.OnlastnameChanging(value);
				this.SendPropertyChanging();
				this._lastname = value;
				this.SendPropertyChanged("lastname");
				this.OnlastnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fathername", DbType="NVarChar(50)")]
	public string fathername
	{
		get
		{
			return this._fathername;
		}
		set
		{
			if ((this._fathername != value))
			{
				this.OnfathernameChanging(value);
				this.SendPropertyChanging();
				this._fathername = value;
				this.SendPropertyChanged("fathername");
				this.OnfathernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_birthdate", DbType="DateTime NOT NULL")]
	public System.DateTime birthdate
	{
		get
		{
			return this._birthdate;
		}
		set
		{
			if ((this._birthdate != value))
			{
				this.OnbirthdateChanging(value);
				this.SendPropertyChanging();
				this._birthdate = value;
				this.SendPropertyChanged("birthdate");
				this.OnbirthdateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string address
	{
		get
		{
			return this._address;
		}
		set
		{
			if ((this._address != value))
			{
				this.OnaddressChanging(value);
				this.SendPropertyChanging();
				this._address = value;
				this.SendPropertyChanged("address");
				this.OnaddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_admission_year", DbType="Int")]
	public System.Nullable<int> admission_year
	{
		get
		{
			return this._admission_year;
		}
		set
		{
			if ((this._admission_year != value))
			{
				this.Onadmission_yearChanging(value);
				this.SendPropertyChanging();
				this._admission_year = value;
				this.SendPropertyChanged("admission_year");
				this.Onadmission_yearChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_grade_perfomance", Storage="_grade_perfomances", ThisKey="studentID", OtherKey="studentID")]
	public EntitySet<grade_perfomance> grade_perfomances
	{
		get
		{
			return this._grade_perfomances;
		}
		set
		{
			this._grade_perfomances.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_group_student", Storage="_group_students", ThisKey="studentID", OtherKey="studentID")]
	public EntitySet<group_student> group_students
	{
		get
		{
			return this._group_students;
		}
		set
		{
			this._group_students.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_individual_class", Storage="_individual_classes", ThisKey="studentID", OtherKey="studentID")]
	public EntitySet<individual_class> individual_classes
	{
		get
		{
			return this._individual_classes;
		}
		set
		{
			this._individual_classes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.student = this;
	}
	
	private void detach_grade_perfomances(grade_perfomance entity)
	{
		this.SendPropertyChanging();
		entity.student = null;
	}
	
	private void attach_group_students(group_student entity)
	{
		this.SendPropertyChanging();
		entity.student = this;
	}
	
	private void detach_group_students(group_student entity)
	{
		this.SendPropertyChanging();
		entity.student = null;
	}
	
	private void attach_individual_classes(individual_class entity)
	{
		this.SendPropertyChanging();
		entity.student = this;
	}
	
	private void detach_individual_classes(individual_class entity)
	{
		this.SendPropertyChanging();
		entity.student = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teacher")]
public partial class teacher : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _teacherID;
	
	private string _name;
	
	private string _lastname;
	
	private string _fathername;
	
	private int _disciplineID;
	
	private EntitySet<group> _groups;
	
	private EntitySet<individual_class> _individual_classes;
	
	private EntityRef<discipline> _discipline;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnfathernameChanging(string value);
    partial void OnfathernameChanged();
    partial void OndisciplineIDChanging(int value);
    partial void OndisciplineIDChanged();
    #endregion
	
	public teacher()
	{
		this._groups = new EntitySet<group>(new Action<group>(this.attach_groups), new Action<group>(this.detach_groups));
		this._individual_classes = new EntitySet<individual_class>(new Action<individual_class>(this.attach_individual_classes), new Action<individual_class>(this.detach_individual_classes));
		this._discipline = default(EntityRef<discipline>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int teacherID
	{
		get
		{
			return this._teacherID;
		}
		set
		{
			if ((this._teacherID != value))
			{
				this.OnteacherIDChanging(value);
				this.SendPropertyChanging();
				this._teacherID = value;
				this.SendPropertyChanged("teacherID");
				this.OnteacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string lastname
	{
		get
		{
			return this._lastname;
		}
		set
		{
			if ((this._lastname != value))
			{
				this.OnlastnameChanging(value);
				this.SendPropertyChanging();
				this._lastname = value;
				this.SendPropertyChanged("lastname");
				this.OnlastnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fathername", DbType="NVarChar(50)")]
	public string fathername
	{
		get
		{
			return this._fathername;
		}
		set
		{
			if ((this._fathername != value))
			{
				this.OnfathernameChanging(value);
				this.SendPropertyChanging();
				this._fathername = value;
				this.SendPropertyChanged("fathername");
				this.OnfathernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disciplineID", DbType="Int NOT NULL")]
	public int disciplineID
	{
		get
		{
			return this._disciplineID;
		}
		set
		{
			if ((this._disciplineID != value))
			{
				if (this._discipline.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OndisciplineIDChanging(value);
				this.SendPropertyChanging();
				this._disciplineID = value;
				this.SendPropertyChanged("disciplineID");
				this.OndisciplineIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_group", Storage="_groups", ThisKey="teacherID", OtherKey="teacherID")]
	public EntitySet<group> groups
	{
		get
		{
			return this._groups;
		}
		set
		{
			this._groups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_individual_class", Storage="_individual_classes", ThisKey="teacherID", OtherKey="teacherID")]
	public EntitySet<individual_class> individual_classes
	{
		get
		{
			return this._individual_classes;
		}
		set
		{
			this._individual_classes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="discipline_teacher", Storage="_discipline", ThisKey="disciplineID", OtherKey="disciplineID", IsForeignKey=true)]
	public discipline discipline
	{
		get
		{
			return this._discipline.Entity;
		}
		set
		{
			discipline previousValue = this._discipline.Entity;
			if (((previousValue != value) 
						|| (this._discipline.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._discipline.Entity = null;
					previousValue.teachers.Remove(this);
				}
				this._discipline.Entity = value;
				if ((value != null))
				{
					value.teachers.Add(this);
					this._disciplineID = value.disciplineID;
				}
				else
				{
					this._disciplineID = default(int);
				}
				this.SendPropertyChanged("discipline");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_groups(group entity)
	{
		this.SendPropertyChanging();
		entity.teacher = this;
	}
	
	private void detach_groups(group entity)
	{
		this.SendPropertyChanging();
		entity.teacher = null;
	}
	
	private void attach_individual_classes(individual_class entity)
	{
		this.SendPropertyChanging();
		entity.teacher = this;
	}
	
	private void detach_individual_classes(individual_class entity)
	{
		this.SendPropertyChanging();
		entity.teacher = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.week_day")]
public partial class week_day : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _weekdayID;
	
	private string _name;
	
	private EntitySet<group_class> _group_classes;
	
	private EntitySet<individual_class> _individual_classes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnweekdayIDChanging(int value);
    partial void OnweekdayIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
	
	public week_day()
	{
		this._group_classes = new EntitySet<group_class>(new Action<group_class>(this.attach_group_classes), new Action<group_class>(this.detach_group_classes));
		this._individual_classes = new EntitySet<individual_class>(new Action<individual_class>(this.attach_individual_classes), new Action<individual_class>(this.detach_individual_classes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekdayID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int weekdayID
	{
		get
		{
			return this._weekdayID;
		}
		set
		{
			if ((this._weekdayID != value))
			{
				this.OnweekdayIDChanging(value);
				this.SendPropertyChanging();
				this._weekdayID = value;
				this.SendPropertyChanged("weekdayID");
				this.OnweekdayIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="week_day_group_class", Storage="_group_classes", ThisKey="weekdayID", OtherKey="weekdayID")]
	public EntitySet<group_class> group_classes
	{
		get
		{
			return this._group_classes;
		}
		set
		{
			this._group_classes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="week_day_individual_class", Storage="_individual_classes", ThisKey="weekdayID", OtherKey="weekdayID")]
	public EntitySet<individual_class> individual_classes
	{
		get
		{
			return this._individual_classes;
		}
		set
		{
			this._individual_classes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_group_classes(group_class entity)
	{
		this.SendPropertyChanging();
		entity.week_day = this;
	}
	
	private void detach_group_classes(group_class entity)
	{
		this.SendPropertyChanging();
		entity.week_day = null;
	}
	
	private void attach_individual_classes(individual_class entity)
	{
		this.SendPropertyChanging();
		entity.week_day = this;
	}
	
	private void detach_individual_classes(individual_class entity)
	{
		this.SendPropertyChanging();
		entity.week_day = null;
	}
}
#pragma warning restore 1591
